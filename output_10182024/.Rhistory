adaptProb = c(P_s2_good_trt31, P_s2_good_trt32) / (P_s2_good_trt31 + P_s2_good_trt32)
adp = c(0, 0, 0); adp[c(1,2)] = bound.prob(adaptProb)
}
}
}
p.ar1[i,4:6] = adp
ar1$s2_trt[i] = sample(trt, size = 1, prob = adp)
if (ar1$s1_trt[i]==1 & ar1$s2_trt[i]==2) {ar1[i,6:8] = sim1[i, 10:12]}
if (ar1$s1_trt[i]==1 & ar1$s2_trt[i]==3) {ar1[i,6:8] = sim1[i, 13:15]}
if (ar1$s1_trt[i]==2 & ar1$s2_trt[i]==1) {ar1[i,6:8] = sim1[i, 16:18]}
if (ar1$s1_trt[i]==2 & ar1$s2_trt[i]==3) {ar1[i,6:8] = sim1[i, 19:21]}
if (ar1$s1_trt[i]==3 & ar1$s2_trt[i]==1) {ar1[i,6:8] = sim1[i, 22:24]}
if (ar1$s1_trt[i]==3 & ar1$s2_trt[i]==2) {ar1[i,6:8] = sim1[i, 25:27]}
}
}
View(p.ar1); View(ar1)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#                                Algorithm 2                                  #
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
c = 1 # tuning parameter
ar2 = as.data.frame(matrix(NA, nrow=n, ncol=8))
colnames(ar2) = c("s1_trt", "s1_YR", "s1_YT", "s1_U",
"s2_trt", "s2_YR", "s2_YT", "s2_U")
ar2[1:n1,1] = sample(trt, n1, replace = TRUE)
for (i in 1:n1) {
ar2[i,2:4] = sim1[i,(3*(ar2[i,1]-1)+1):(3*ar2[i,1])]
}
p.ar2 = as.data.frame(matrix(NA, nrow=n, ncol=6))
colnames(p.ar2) = c("s1_trt1", "s1_trt2", "s1_trt3",
"s2_trt1", "s2_trt2", "s2_trt3")
p.ar2[1:n1, 1:3] = 1/3
for (i in (n1+1):n) {
E_U_s1_trt1 = mean(na.omit(ar2$s1_U[ar2$s1_trt == 1]))
E_U_s1_trt2 = mean(na.omit(ar2$s1_U[ar2$s1_trt == 2]))
E_U_s1_trt3 = mean(na.omit(ar2$s1_U[ar2$s1_trt == 3]))
adaptProb = c(E_U_s1_trt1^c, E_U_s1_trt2^c, E_U_s1_trt3^c) /
sum(c(E_U_s1_trt1^c, E_U_s1_trt2^c, E_U_s1_trt3^c))
p.ar2[i,1:3] = bound.prob(adaptProb)
trt_i_s1 = sample(trt, size = 1, prob = adaptProb)
ar2[i,1:4] = c(trt_i_s1, sim1[i,(3*(trt_i_s1-1)+1):(3*trt_i_s1)])
}
for (i in 1:n2) {
prob_burn2 = c(0.5,0.5,0.5)
prob_burn2[ar2$s1_trt[i]] = 0
ar2$s2_trt[i] = sample(trt, 1, prob = prob_burn2)
if (ar2$s1_trt[i]==1 & ar2$s2_trt[i]==2) {ar2[i,6:8] = sim1[i, 10:12]}
if (ar2$s1_trt[i]==1 & ar2$s2_trt[i]==3) {ar2[i,6:8] = sim1[i, 13:15]}
if (ar2$s1_trt[i]==2 & ar2$s2_trt[i]==1) {ar2[i,6:8] = sim1[i, 16:18]}
if (ar2$s1_trt[i]==2 & ar2$s2_trt[i]==3) {ar2[i,6:8] = sim1[i, 19:21]}
if (ar2$s1_trt[i]==3 & ar2$s2_trt[i]==1) {ar2[i,6:8] = sim1[i, 22:24]}
if (ar2$s1_trt[i]==3 & ar2$s2_trt[i]==2) {ar2[i,6:8] = sim1[i, 25:27]}
}
ar2$s2_trt[ar2$s1_YR==1] = NA
p.ar2[1:n2, 4:6] = 1/2
for (i in 1:n2) {p.ar2[i, c(ar2$s1_trt[i]+3)] = 0}
for (i in (n2+1):n) {
if (ar2$s1_YR[i]==1) {ar2$s2_trt[i] = NA}
else {
data = subset(ar2[1:(i-1),],
s1_trt == ar2$s1_trt[i] &
s1_YR == ar2$s1_YR[i] &
s1_YT == ar2$s1_YT[i])
if (length(data) <= 1 || length(unique(data$s2_trt)) <2) {
if (ar2$s1_trt[i] == 1) {adp = c(0, 0.5, 0.5)}
if (ar2$s1_trt[i] == 2) {adp = c(0.5, 0, 0.5)}
if (ar2$s1_trt[i] == 3) {adp = c(0.5, 0.5, 0)}
}
else {
if (ar2$s1_trt[i] == 1) {
EU_s2_trt12 = mean(subset(data, s2_trt == 2)$s2_U)
EU_s2_trt13 = mean(subset(data, s2_trt == 3)$s2_U)
adaptProb = c(EU_s2_trt12, EU_s2_trt13) / (EU_s2_trt12 + EU_s2_trt13)
adp = c(0, 0, 0); adp[c(2,3)] = bound.prob(adaptProb)
}
if (ar2$s1_trt[i] == 2) {
EU_s2_trt21 = mean(subset(data, s2_trt == 1)$s2_U)
EU_s2_trt23 = mean(subset(data, s2_trt == 3)$s2_U)
adaptProb = c(EU_s2_trt21, EU_s2_trt23) / (EU_s2_trt21 + EU_s2_trt23)
adp = c(0, 0, 0); adp[c(1,3)] = bound.prob(adaptProb)
}
if (ar2$s1_trt[i] == 3) {
EU_s2_trt31 = mean(subset(data, s2_trt == 1)$s2_U)
EU_s2_trt32 = mean(subset(data, s2_trt == 2)$s2_U)
adaptProb = c(EU_s2_trt31, EU_s2_trt32) / (EU_s2_trt31 + EU_s2_trt32)
adp = c(0, 0, 0); adp[c(1,2)] = bound.prob(adaptProb)
}
}
p.ar2[i,4:6] = adp
ar2$s2_trt[i] = sample(trt, size = 1, prob = adp)
if (ar2$s1_trt[i]==1 & ar2$s2_trt[i]==2) {ar2[i,6:8] = sim1[i, 10:12]}
if (ar2$s1_trt[i]==1 & ar2$s2_trt[i]==3) {ar2[i,6:8] = sim1[i, 13:15]}
if (ar2$s1_trt[i]==2 & ar2$s2_trt[i]==1) {ar2[i,6:8] = sim1[i, 16:18]}
if (ar2$s1_trt[i]==2 & ar2$s2_trt[i]==3) {ar2[i,6:8] = sim1[i, 19:21]}
if (ar2$s1_trt[i]==3 & ar2$s2_trt[i]==1) {ar2[i,6:8] = sim1[i, 22:24]}
if (ar2$s1_trt[i]==3 & ar2$s2_trt[i]==2) {ar2[i,6:8] = sim1[i, 25:27]}
}
}
View(p.ar2); View(ar2)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#                                Algorithm 3                                  #
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
ar3 = as.data.frame(matrix(NA, nrow=n, ncol=8))
colnames(ar3) = c("s1_trt", "s1_YR", "s1_YT", "s1_U",
"s2_trt", "s2_YR", "s2_YT", "s2_U")
ar3[1:n1,1] = sample(trt, n1, replace = TRUE)
for (i in 1:n1) {
ar3[i,2:4] = sim1[i,(3*(ar3[i,1]-1)+1):(3*ar3[i,1])]
}
p.ar3 = as.data.frame(matrix(NA, nrow=n, ncol=6))
colnames(p.ar3) = c("s1_trt1", "s1_trt2", "s1_trt3",
"s2_trt1", "s2_trt2", "s2_trt3")
p.ar3[1:n1, 1:3] = 1/3
nboot = 300
for (i in (n1+1):n) {
boot_i = boots.max.s1(ar3[1:i-1,c(1,4)],nboot)
adaptProb = c(sum(boot_i==1)^c, sum(boot_i==2)^c, sum(boot_i==3)^c) /
(sum(boot_i==1)^c + sum(boot_i==2)^c +sum(boot_i==3)^c)
p.ar3[i,1:3] = bound.prob(adaptProb)
trt_i_s1 = sample(trt, size = 1, prob = adaptProb)
ar3[i,1:4] = c(trt_i_s1, sim1[i,(3*(trt_i_s1-1)+1):(3*trt_i_s1)])
}
for (i in 1:n2) {
prob_burn2 = c(0.5,0.5,0.5)
prob_burn2[ar3$s1_trt[i]] = 0
ar3$s2_trt[i] = sample(trt, 1, prob = prob_burn2)
if (ar3$s1_trt[i]==1 & ar3$s2_trt[i]==2) {ar3[i,6:8] = sim1[i, 10:12]}
if (ar3$s1_trt[i]==1 & ar3$s2_trt[i]==3) {ar3[i,6:8] = sim1[i, 13:15]}
if (ar3$s1_trt[i]==2 & ar3$s2_trt[i]==1) {ar3[i,6:8] = sim1[i, 16:18]}
if (ar3$s1_trt[i]==2 & ar3$s2_trt[i]==3) {ar3[i,6:8] = sim1[i, 19:21]}
if (ar3$s1_trt[i]==3 & ar3$s2_trt[i]==1) {ar3[i,6:8] = sim1[i, 22:24]}
if (ar3$s1_trt[i]==3 & ar3$s2_trt[i]==2) {ar3[i,6:8] = sim1[i, 25:27]}
}
ar3$s2_trt[ar3$s1_YR==1] = NA
p.ar3[1:n2, 4:6] = 1/2
for (i in 1:n2) {p.ar3[i, c(ar3$s1_trt[i]+3)] = 0}
for (i in (n2+1):n) {
print(i)
if (ar3$s1_YR[i]==1) {ar3$s2_trt[i] = NA}
else {
boot_i = boots.max.s2(dat = ar3[1:(i-1),], nboot=nboot, new = ar3[i,])
boot_i = na.omit(boot_i)
if (sum(boot_i==0) > 0.5*length(boot_i)) {
if (ar2$s1_trt[i] == 1) {adp = c(0, 0.5, 0.5)}
if (ar2$s1_trt[i] == 2) {adp = c(0.5, 0, 0.5)}
if (ar2$s1_trt[i] == 3) {adp = c(0.5, 0.5, 0)}
}
else {
boot_i = boot_i[which(boot_i!=0)]
if (ar3$s1_trt[i] == 1) {
adaptProb = c( sum(boot_i==2)^c, sum(boot_i==3)^c) / (sum(boot_i==2)^c +sum(boot_i==3)^c)
adp = c(0, 0, 0); adp[c(2,3)] = bound.prob(adaptProb)}
if (ar3$s1_trt[i] == 2) {
adaptProb = c( sum(boot_i==1)^c, sum(boot_i==3)^c) / (sum(boot_i==1)^c +sum(boot_i==3)^c)
adp = c(0, 0, 0); adp[c(1,3)] = bound.prob(adaptProb)}
if (ar3$s1_trt[i] == 3) {
adaptProb = c( sum(boot_i==1)^c, sum(boot_i==2)^c) / (sum(boot_i==1)^c +sum(boot_i==2)^c)
adp = c(0, 0, 0); adp[c(1,2)] = bound.prob(adaptProb)}
p.ar3[i,4:6] = adp
ar3$s2_trt[i] = sample(trt, size = 1, prob = adp)
if (ar3$s1_trt[i]==1 & ar3$s2_trt[i]==2) {ar3[i,6:8] = sim1[i, 10:12]}
if (ar3$s1_trt[i]==1 & ar3$s2_trt[i]==3) {ar3[i,6:8] = sim1[i, 13:15]}
if (ar3$s1_trt[i]==2 & ar3$s2_trt[i]==1) {ar3[i,6:8] = sim1[i, 16:18]}
if (ar3$s1_trt[i]==2 & ar3$s2_trt[i]==3) {ar3[i,6:8] = sim1[i, 19:21]}
if (ar3$s1_trt[i]==3 & ar3$s2_trt[i]==1) {ar3[i,6:8] = sim1[i, 22:24]}
if (ar3$s1_trt[i]==3 & ar3$s2_trt[i]==2) {ar3[i,6:8] = sim1[i, 25:27]}
}
}
}
View(p.ar3); View(ar3)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#                                 Estimation                                  #
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#                         Evaluation Criteria                                 #
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
mean(sim1$U_s1_trt1)
mean(sim1$U_s1_trt2)
mean(sim1$U_s1_trt3)
table(ar1$s1_trt); table(ar2$s1_trt); table(ar3$s1_trt)
table(ar1$s2_trt); table(ar2$s2_trt); table(ar3$s2_trt)
# response rate
sum(ar1$s1_YR==1)+sum(na.omit(ar1)$s2_YR==1)
sum(ar2$s1_YR==1)+sum(na.omit(ar2)$s2_YR==1)
sum(ar3$s1_YR==1)+sum(na.omit(ar3)$s2_YR==1)
# toxicity
mean(ar1$s1_YT); mean(ar2$s1_YT); mean(ar3$s1_YT)
mean(na.omit(ar1$s2_YT)); mean(na.omit(ar2$s2_YT)); mean(na.omit(ar3$s2_YT))
# percentage of treated with the best treatment
sum(ar1$s1_trt==3)+sum(na.omit(ar1)$s1_trt==3)
sum(ar2$s1_trt==3)+sum(na.omit(ar2)$s1_trt==3)
sum(ar3$s1_trt==3)+sum(na.omit(ar3)$s1_trt==3)
# utility
ar1$s2_U[which(ar1$s1_YR == 1)] = 100
ar2$s2_U[which(ar2$s1_YR == 1)] = 100
ar3$s2_U[which(ar3$s1_YR == 1)] = 100
# sum of the population overall utility
ar1$U = ar1$s1_U * ar1$s2_U ; sum(ar1$U)
ar2$U = ar2$s1_U * ar2$s2_U ; sum(ar2$U)
ar3$U = ar3$s1_U * ar3$s2_U ; sum(ar3$U)
mean(sim1$YR_s1_trt1)
data=sim1
## NIPWE
n = nrow(data)
P_s1_trt1 = sum(data$s1_trt == 1) / n
P_s1_trt2 = sum(data$s1_trt == 2) / n
P_s1_trt3 = sum(data$s1_trt == 3) / n
View(data)
data=ar2
## NIPWE
n = nrow(data)
P_s1_trt1 = sum(data$s1_trt == 1) / n
P_s1_trt2 = sum(data$s1_trt == 2) / n
P_s1_trt3 = sum(data$s1_trt == 3) / n
P_s2_trt12 = nrow(subset(data, s1_trt==1 & s2_trt==2)) / nrow(subset(data, s1_trt==1 & s1_YR==0))
P_s2_trt13 = nrow(subset(data, s1_trt==1 & s2_trt==3)) / nrow(subset(data, s1_trt==1 & s1_YR==0))
P_s2_trt21 = nrow(subset(data, s1_trt==2 & s2_trt==1)) / nrow(subset(data, s1_trt==2 & s1_YR==0))
P_s2_trt23 = nrow(subset(data, s1_trt==2 & s2_trt==3)) / nrow(subset(data, s1_trt==2 & s1_YR==0))
P_s2_trt31 = nrow(subset(data, s1_trt==3 & s2_trt==1)) / nrow(subset(data, s1_trt==3 & s1_YR==0))
P_s2_trt32 = nrow(subset(data, s1_trt==3 & s2_trt==2)) / nrow(subset(data, s1_trt==3 & s1_YR==0))
W12 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1*P_s2_trt12)
W12
View(data)
ar2$s2_trt[is.na(ar2$s2_trt)] = 0
View(ar2)
data=ar2
## NIPWE
n = nrow(data)
P_s1_trt1 = sum(data$s1_trt == 1) / n
P_s1_trt2 = sum(data$s1_trt == 2) / n
P_s1_trt3 = sum(data$s1_trt == 3) / n
P_s2_trt12 = nrow(subset(data, s1_trt==1 & s2_trt==2)) / nrow(subset(data, s1_trt==1 & s1_YR==0))
P_s2_trt13 = nrow(subset(data, s1_trt==1 & s2_trt==3)) / nrow(subset(data, s1_trt==1 & s1_YR==0))
P_s2_trt21 = nrow(subset(data, s1_trt==2 & s2_trt==1)) / nrow(subset(data, s1_trt==2 & s1_YR==0))
P_s2_trt23 = nrow(subset(data, s1_trt==2 & s2_trt==3)) / nrow(subset(data, s1_trt==2 & s1_YR==0))
P_s2_trt31 = nrow(subset(data, s1_trt==3 & s2_trt==1)) / nrow(subset(data, s1_trt==3 & s1_YR==0))
P_s2_trt32 = nrow(subset(data, s1_trt==3 & s2_trt==2)) / nrow(subset(data, s1_trt==3 & s1_YR==0))
W12 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1*P_s2_trt12)
W13 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==3) /(P_s1_trt1*P_s2_trt13)
W21 = data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==1) /(P_s1_trt2*P_s2_trt21)
W23 = data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==3) /(P_s1_trt2*P_s2_trt23)
W31 = data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==1) /(P_s1_trt3*P_s2_trt31)
W32 = data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==2) /(P_s1_trt3*P_s2_trt32)
W12
data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1
W12-data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1
300/(P_s1_trt1*P_s2_trt12)
IPWE12 = W12 * data$U / sum(W12)
IPWE13 = W13 * data$U / sum(W13)
IPWE21 = W21 * data$U / sum(W21)
IPWE23 = W23 * data$U / sum(W23)
IPWE31 = W31 * data$U / sum(W31)
IPWE32 = W32 * data$U / sum(W32)
NIPWE = c(IPWE12, IPWE13, IPWE21, IPWE23, IPWE31, IPWE32)
NIPWE
IPWE12 = W12 * data$U / sum(W12)
IPWE12 = W12 %*% data$U / sum(W12)
IPWE12 = W12 %*% data$U / sum(W12)
IPWE13 = W13 %*% data$U / sum(W13)
IPWE21 = W21 %*% data$U / sum(W21)
IPWE23 = W23 %*% data$U / sum(W23)
IPWE31 = W31 %*% data$U / sum(W31)
IPWE32 = W32 %*% data$U / sum(W32)
NIPWE = c(IPWE12, IPWE13, IPWE21, IPWE23, IPWE31, IPWE32)
head(data)
ghatU_trt12 = mean(subset(data, s1_trt==1 & s2_trt==2)$U)
DRE12 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ### ghatU * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ### ghatU * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12)
}
ghatU_trt12
ghatU_trt12 = mean(subset(data, s1_trt==1 & s2_trt==2)$U)
ghatU_trt13 = mean(subset(data, s1_trt==1 & s2_trt==3)$U)
ghatU_trt21 = mean(subset(data, s1_trt==2 & s2_trt==1)$U)
ghatU_trt23 = mean(subset(data, s1_trt==2 & s2_trt==3)$U)
ghatU_trt31 = mean(subset(data, s1_trt==3 & s2_trt==1)$U)
ghatU_trt32 = mean(subset(data, s1_trt==3 & s2_trt==2)$U)
DRE12 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt12 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ghatU_trt12 * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12)
DRE13 = data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt13 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==3) /(P_s1_trt1 * P_s2_trt13) -
(1 - data$s1_YR) * ghatU_trt13 * ((data$s1_trt==1)*(data$s2_trt==3) - P_s1_trt1 * P_s2_trt13) / (P_s1_trt1 * P_s2_trt13)
DRE21 = data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt21 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==1) /(P_s1_trt2 * P_s2_trt21) -
(1 - data$s1_YR) * ghatU_trt21 * ((data$s1_trt==2)*(data$s2_trt==1) - P_s1_trt2 * P_s2_trt21) / (P_s1_trt2 * P_s2_trt21)
DRE23 = data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt23 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==3) /(P_s1_trt2 * P_s2_trt23) -
(1 - data$s1_YR) * ghatU_trt23 * ((data$s1_trt==2)*(data$s2_trt==3) - P_s1_trt2 * P_s2_trt23) / (P_s1_trt2 * P_s2_trt23)
DRE31 = data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt31 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==1) /(P_s1_trt3 * P_s2_trt31) -
(1 - data$s1_YR) * ghatU_trt31 * ((data$s1_trt==3)*(data$s2_trt==1) - P_s1_trt3 * P_s2_trt31) / (P_s1_trt3 * P_s2_trt31)
DRE32 = data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt32 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==2) /(P_s1_trt3 * P_s2_trt32) -
(1 - data$s1_YR) * ghatU_trt32 * ((data$s1_trt==3)*(data$s2_trt==2) - P_s1_trt3 * P_s2_trt32) / (P_s1_trt3 * P_s2_trt32)
DR12
DRE12
data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1
DRE12 = sum( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt12 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ghatU_trt12 * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12) )
DRE13 = sum( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt13 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==3) /(P_s1_trt1 * P_s2_trt13) -
(1 - data$s1_YR) * ghatU_trt13 * ((data$s1_trt==1)*(data$s2_trt==3) - P_s1_trt1 * P_s2_trt13) / (P_s1_trt1 * P_s2_trt13) )
DRE21 = sum( data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt21 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==1) /(P_s1_trt2 * P_s2_trt21) -
(1 - data$s1_YR) * ghatU_trt21 * ((data$s1_trt==2)*(data$s2_trt==1) - P_s1_trt2 * P_s2_trt21) / (P_s1_trt2 * P_s2_trt21) )
DRE23 = sum( data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt23 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==3) /(P_s1_trt2 * P_s2_trt23) -
(1 - data$s1_YR) * ghatU_trt23 * ((data$s1_trt==2)*(data$s2_trt==3) - P_s1_trt2 * P_s2_trt23) / (P_s1_trt2 * P_s2_trt23) )
DRE31 = sum( data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt31 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==1) /(P_s1_trt3 * P_s2_trt31) -
(1 - data$s1_YR) * ghatU_trt31 * ((data$s1_trt==3)*(data$s2_trt==1) - P_s1_trt3 * P_s2_trt31) / (P_s1_trt3 * P_s2_trt31) )
DRE32 = sum( data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt32 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==2) /(P_s1_trt3 * P_s2_trt32) -
(1 - data$s1_YR) * ghatU_trt32 * ((data$s1_trt==3)*(data$s2_trt==2) - P_s1_trt3 * P_s2_trt32) / (P_s1_trt3 * P_s2_trt32) )
DRE13 = mean( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt13 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==3) /(P_s1_trt1 * P_s2_trt13) -
(1 - data$s1_YR) * ghatU_trt13 * ((data$s1_trt==1)*(data$s2_trt==3) - P_s1_trt1 * P_s2_trt13) / (P_s1_trt1 * P_s2_trt13) )
DRE21 = mean( data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt21 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==1) /(P_s1_trt2 * P_s2_trt21) -
(1 - data$s1_YR) * ghatU_trt21 * ((data$s1_trt==2)*(data$s2_trt==1) - P_s1_trt2 * P_s2_trt21) / (P_s1_trt2 * P_s2_trt21) )
DRE23 = mean( data$s1_YR * data$U * (data$s1_trt==2) / P_s1_trt2 -
data$s1_YR * ghatU_trt23 * ((data$s1_trt==2) - P_s1_trt2) / P_s1_trt2 +
(1 - data$s1_YR) * data$U * (data$s1_trt==2) * (data$s2_trt==3) /(P_s1_trt2 * P_s2_trt23) -
(1 - data$s1_YR) * ghatU_trt23 * ((data$s1_trt==2)*(data$s2_trt==3) - P_s1_trt2 * P_s2_trt23) / (P_s1_trt2 * P_s2_trt23) )
DRE31 = mean( data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt31 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==1) /(P_s1_trt3 * P_s2_trt31) -
(1 - data$s1_YR) * ghatU_trt31 * ((data$s1_trt==3)*(data$s2_trt==1) - P_s1_trt3 * P_s2_trt31) / (P_s1_trt3 * P_s2_trt31) )
DRE32 = mean( data$s1_YR * data$U * (data$s1_trt==3) / P_s1_trt3 -
data$s1_YR * ghatU_trt32 * ((data$s1_trt==3) - P_s1_trt3) / P_s1_trt3 +
(1 - data$s1_YR) * data$U * (data$s1_trt==3) * (data$s2_trt==2) /(P_s1_trt3 * P_s2_trt32) -
(1 - data$s1_YR) * ghatU_trt32 * ((data$s1_trt==3)*(data$s2_trt==2) - P_s1_trt3 * P_s2_trt32) / (P_s1_trt3 * P_s2_trt32) )
DRE12 = sum( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt12 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ghatU_trt12 * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12) )
DRE12 = sum( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt12 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ghatU_trt12 * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12) )
DRE12 = mean( data$s1_YR * data$U * (data$s1_trt==1) / P_s1_trt1 -
data$s1_YR * ghatU_trt12 * ((data$s1_trt==1) - P_s1_trt1) / P_s1_trt1 +
(1 - data$s1_YR) * data$U * (data$s1_trt==1) * (data$s2_trt==2) /(P_s1_trt1 * P_s2_trt12) -
(1 - data$s1_YR) * ghatU_trt12 * ((data$s1_trt==1)*(data$s2_trt==2) - P_s1_trt1 * P_s2_trt12) / (P_s1_trt1 * P_s2_trt12) )
DRE = c(DRE12, DRE13, DRE21, DRE23, DRE31, DRE32)
DRE
NIPWE
head(data)
G12 = ghatU_trt1_YT0_YR1 * P_YR1_YT0_gv_trt1 +
ghatU_trt1_YT1_YR1 * P_YR1_YT1_gv_trt1 +
ghatU_trt1_YT2_YR1 * P_YR1_YT2_gv_trt1 +
ghatU_trt12_YT0_YR0 * P_YR0_YT0_gv_trt1 +
ghatU_trt12_YT1_YR0 * P_YR0_YT1_gv_trt1 +
ghatU_trt12_YT2_YR0 * P_YR0_YT2_gv_trt1
data_s1_r = subset(data, s1_YR==1)
data_s1_nr = subset(data, s1_YR==0)
ghatU_trt1_YT0_YR1 = mean(subset(data_s1_r, s1_trt==1 & s1_YT==0)$U)
ghatU_trt1_YT1_YR1 = mean(subset(data_s1_r, s1_trt==1 & s1_YT==1)$U)
ghatU_trt1_YT2_YR1 = mean(subset(data_s1_r, s1_trt==1 & s1_YT==2)$U)
ghatU_trt2_YT0_YR1 = mean(subset(data_s1_r, s1_trt==2 & s1_YT==0)$U)
ghatU_trt2_YT1_YR1 = mean(subset(data_s1_r, s1_trt==2 & s1_YT==1)$U)
ghatU_trt2_YT2_YR1 = mean(subset(data_s1_r, s1_trt==2 & s1_YT==2)$U)
ghatU_trt3_YT0_YR1 = mean(subset(data_s1_r, s1_trt==3 & s1_YT==0)$U)
ghatU_trt3_YT1_YR1 = mean(subset(data_s1_r, s1_trt==3 & s1_YT==1)$U)
ghatU_trt3_YT2_YR1 = mean(subset(data_s1_r, s1_trt==3 & s1_YT==2)$U)
P_YR1_YT0_gv_trt1 = nrow(subset(data_s1_r, s1_trt==1 & s1_YT==0)) / nrow(subset(data, s1_trt==1))
P_YR1_YT1_gv_trt1 = nrow(subset(data_s1_r, s1_trt==1 & s1_YT==1)) / nrow(subset(data, s1_trt==1))
P_YR1_YT2_gv_trt1 = nrow(subset(data_s1_r, s1_trt==1 & s1_YT==2)) / nrow(subset(data, s1_trt==1))
P_YR1_YT0_gv_trt2 = nrow(subset(data_s1_r, s1_trt==2 & s1_YT==0)) / nrow(subset(data, s1_trt==2))
P_YR1_YT1_gv_trt2 = nrow(subset(data_s1_r, s1_trt==2 & s1_YT==1)) / nrow(subset(data, s1_trt==2))
P_YR1_YT2_gv_trt2 = nrow(subset(data_s1_r, s1_trt==2 & s1_YT==2)) / nrow(subset(data, s1_trt==2))
P_YR1_YT0_gv_trt3 = nrow(subset(data_s1_r, s1_trt==3 & s1_YT==0)) / nrow(subset(data, s1_trt==3))
P_YR1_YT1_gv_trt3 = nrow(subset(data_s1_r, s1_trt==3 & s1_YT==1)) / nrow(subset(data, s1_trt==3))
P_YR1_YT2_gv_trt3 = nrow(subset(data_s1_r, s1_trt==3 & s1_YT==2)) / nrow(subset(data, s1_trt==3))
ghatU_trt12_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==2 & s1_YT==0)$U)
ghatU_trt12_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==2 & s1_YT==1)$U)
ghatU_trt12_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==2 & s1_YT==2)$U)
ghatU_trt13_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==3 & s1_YT==0)$U)
ghatU_trt13_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==3 & s1_YT==1)$U)
ghatU_trt13_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==1 & s2_trt==3 & s1_YT==2)$U)
ghatU_trt21_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==1 & s1_YT==0)$U)
ghatU_trt21_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==1 & s1_YT==1)$U)
ghatU_trt21_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==1 & s1_YT==2)$U)
ghatU_trt23_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==3 & s1_YT==0)$U)
ghatU_trt23_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==3 & s1_YT==1)$U)
ghatU_trt23_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==2 & s2_trt==3 & s1_YT==2)$U)
ghatU_trt31_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==1 & s1_YT==0)$U)
ghatU_trt31_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==1 & s1_YT==1)$U)
ghatU_trt31_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==1 & s1_YT==2)$U)
ghatU_trt32_YT0_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==2 & s1_YT==0)$U)
ghatU_trt32_YT1_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==2 & s1_YT==1)$U)
ghatU_trt32_YT2_YR0 = mean(subset(data_s1_nr, s1_trt==3 & s2_trt==2 & s1_YT==2)$U)
P_YR0_YT0_gv_trt1 = nrow(subset(data_s1_nr, s1_trt==1 & s1_YT==0)) / nrow(subset(data, s1_trt==1))
P_YR0_YT1_gv_trt1 = nrow(subset(data_s1_nr, s1_trt==1 & s1_YT==1)) / nrow(subset(data, s1_trt==1))
P_YR0_YT2_gv_trt1 = nrow(subset(data_s1_nr, s1_trt==1 & s1_YT==2)) / nrow(subset(data, s1_trt==1))
P_YR0_YT0_gv_trt2 = nrow(subset(data_s1_nr, s1_trt==2 & s1_YT==0)) / nrow(subset(data, s1_trt==2))
P_YR0_YT1_gv_trt2 = nrow(subset(data_s1_nr, s1_trt==2 & s1_YT==1)) / nrow(subset(data, s1_trt==2))
P_YR0_YT2_gv_trt2 = nrow(subset(data_s1_nr, s1_trt==2 & s1_YT==2)) / nrow(subset(data, s1_trt==2))
P_YR0_YT0_gv_trt3 = nrow(subset(data_s1_nr, s1_trt==3 & s1_YT==0)) / nrow(subset(data, s1_trt==3))
P_YR0_YT1_gv_trt3 = nrow(subset(data_s1_nr, s1_trt==3 & s1_YT==1)) / nrow(subset(data, s1_trt==3))
P_YR0_YT2_gv_trt3 = nrow(subset(data_s1_nr, s1_trt==3 & s1_YT==2)) / nrow(subset(data, s1_trt==3))
G12 = ghatU_trt1_YT0_YR1 * P_YR1_YT0_gv_trt1 +
ghatU_trt1_YT1_YR1 * P_YR1_YT1_gv_trt1 +
ghatU_trt1_YT2_YR1 * P_YR1_YT2_gv_trt1 +
ghatU_trt12_YT0_YR0 * P_YR0_YT0_gv_trt1 +
ghatU_trt12_YT1_YR0 * P_YR0_YT1_gv_trt1 +
ghatU_trt12_YT2_YR0 * P_YR0_YT2_gv_trt1
G13 = ghatU_trt1_YT0_YR1 * P_YR1_YT0_gv_trt1 +
ghatU_trt1_YT1_YR1 * P_YR1_YT1_gv_trt1 +
ghatU_trt1_YT2_YR1 * P_YR1_YT2_gv_trt1 +
ghatU_trt13_YT0_YR0 * P_YR0_YT0_gv_trt1 +
ghatU_trt13_YT1_YR0 * P_YR0_YT1_gv_trt1 +
ghatU_trt13_YT2_YR0 * P_YR0_YT2_gv_trt1
G21 = ghatU_trt2_YT0_YR1 * P_YR1_YT0_gv_trt2 +
ghatU_trt2_YT1_YR1 * P_YR1_YT1_gv_trt2 +
ghatU_trt2_YT2_YR1 * P_YR1_YT2_gv_trt2 +
ghatU_trt21_YT0_YR0 * P_YR0_YT0_gv_trt2 +
ghatU_trt21_YT1_YR0 * P_YR0_YT1_gv_trt2 +
ghatU_trt21_YT2_YR0 * P_YR0_YT2_gv_trt2
G23 = ghatU_trt2_YT0_YR1 * P_YR1_YT0_gv_trt2 +
ghatU_trt2_YT1_YR1 * P_YR1_YT1_gv_trt2 +
ghatU_trt2_YT2_YR1 * P_YR1_YT2_gv_trt2 +
ghatU_trt23_YT0_YR0 * P_YR0_YT0_gv_trt2 +
ghatU_trt23_YT1_YR0 * P_YR0_YT1_gv_trt2 +
ghatU_trt23_YT2_YR0 * P_YR0_YT2_gv_trt2
G31 = ghatU_trt3_YT0_YR1 * P_YR1_YT0_gv_trt3 +
ghatU_trt3_YT1_YR1 * P_YR1_YT1_gv_trt3 +
ghatU_trt3_YT2_YR1 * P_YR1_YT2_gv_trt3 +
ghatU_trt31_YT0_YR0 * P_YR0_YT0_gv_trt3 +
ghatU_trt31_YT1_YR0 * P_YR0_YT1_gv_trt3 +
ghatU_trt31_YT2_YR0 * P_YR0_YT2_gv_trt3
G32 = ghatU_trt3_YT0_YR1 * P_YR1_YT0_gv_trt3 +
ghatU_trt3_YT1_YR1 * P_YR1_YT1_gv_trt3 +
ghatU_trt3_YT2_YR1 * P_YR1_YT2_gv_trt3 +
ghatU_trt32_YT0_YR0 * P_YR0_YT0_gv_trt3 +
ghatU_trt32_YT1_YR0 * P_YR0_YT1_gv_trt3 +
ghatU_trt32_YT2_YR0 * P_YR0_YT2_gv_trt3
G = c(G12, G13, G21, G23, G31, G32)
G
NIPWE
DRE
est = list(G=G, NIPWE=NIPWE, DRE=DRE)
est
setwd("C:/Users/xmao6/Desktop/USMART_blue/output_10182024")
nsim = 500
for (ind in 1:nsim){
filename = paste0("USMART_sim", 10000+ind, "setting_1.rda")
dataname = paste0("results", ind)
load(filename)
assign(dataname, results)
}
truth = matrix(NA, nrow = nsim, ncol = 6)
ct_avaiable = 0
for (ind in 1:nsim) {
current_result = get(paste0("results", ind))
if (length(is.na(current_result))!=1 ) {
truth[ind,] = current_result[[1]][[5]]
ct_avaiable = ct_avaiable + 1
}
}
ct_avaiable
sum(na.omit(truth[,4] == "32"))
sum(na.omit(truth[,5] == "32"))
sum(na.omit(truth[,6] == "32"))
eva.summary = array(NA, dim=c(nsim, 4, 6))
for (ind in 1:nsim) {
current_result = get(paste0("results", ind))
if (length(is.na(current_result))!=1 ) {
eva.ar1 = current_result[[1]][[1]]
eva.ar2 = current_result[[1]][[2]]
eva.ar3 = current_result[[1]][[3]]
eva.smart = current_result[[1]][[4]]
eva.summary[ind,,] = rbind(eva.ar1, eva.ar2, eva.ar3, eva.smart)
print(rbind(eva.ar1, eva.ar2, eva.ar3, eva.smart))
}
}
prop_best1=eva.summary[,1,1]
prop_best2=eva.summary[,2,1]
prop_best3=eva.summary[,3,1]
prop_best4=eva.summary[,4,1]
View(results98)
